local tick, taskWait, sqrt, ceil, floor, sort, huge = tick, task.wait, math.sqrt, math.ceil, math.floor, table.sort, math.huge

local config = {
    overheadIterations = 100000,
    warmupIterations = 1000,
    testIterations = 100000,
    progressIntervalFactor = 10,
    waitTime = 0.3,
}

local function log(message)
    print(message)
    taskWait(config.waitTime)
end

local function measureTickOverhead(iterations)
    local totalOverhead = 0
    for i = 1, iterations do
        local startTick = tick()
        local endTick = tick()
        totalOverhead = totalOverhead + (endTick - startTick)
    end
    return totalOverhead / iterations
end

local function sampleCode()
    local sum = 0
    for i = 1, 100 do
        sum = sum + sqrt(i)
    end
    return sum
end

local function runWarmup(iterations)
    for i = 1, iterations do
        sampleCode()
    end
end

local function runTest(iterations, tickOverhead, progressInterval)
    local times = table.create(iterations)
    local testStartTime = tick()
    for i = 1, iterations do
        local startTime = tick()
        sampleCode()
        local endTime = tick()
        local elapsed = endTime - startTime - 2 * tickOverhead
        times[i] = elapsed > 0 and elapsed or 0
        if i % progressInterval == 0 then
            local percent = floor(i / iterations * 100)
            log(("✅ Progress: %d%%"):format(percent))
        end
    end
    local testDuration = tick() - testStartTime
    return times, testDuration
end

local function computeStats(times, count)
    local totalTime, minTime, maxTime = 0, huge, 0
    for i = 1, count do
        local t = times[i]
        totalTime = totalTime + t
        if t < minTime then minTime = t end
        if t > maxTime then maxTime = t end
    end
    local avgTime = totalTime / count
    sort(times)
    local medianTime = count % 2 == 0 and (times[count / 2] + times[count / 2 + 1]) / 2 or times[floor(count / 2) + 1]
    local function getPercentile(p)
        local index = floor(count * p)
        return times[index > 0 and index or 1]
    end
    local p90Time = getPercentile(0.90)
    local p95Time = getPercentile(0.95)
    local p99Time = getPercentile(0.99)
    local p999Time = getPercentile(0.999)
    local sumSqDiff, sumAbsDiff = 0, 0
    for i = 1, count do
        local diff = times[i] - avgTime
        sumSqDiff = sumSqDiff + diff * diff
        sumAbsDiff = sumAbsDiff + math.abs(diff)
    end
    local stdev = sqrt(sumSqDiff / count)
    local mad = sumAbsDiff / count
    local coeffVariation = avgTime > 0 and (stdev / avgTime * 100) or 0
    return {
        avgTime = avgTime,
        medianTime = medianTime,
        minTime = minTime,
        maxTime = maxTime,
        p90Time = p90Time,
        p95Time = p95Time,
        p99Time = p99Time,
        p999Time = p999Time,
        stdev = stdev,
        mad = mad,
        coeffVariation = coeffVariation,
    }
end

local function formatTime(t)
    if t < 1e-6 then
        return (t * 1e9) .. " nanoseconds"
    elseif t < 1e-3 then
        return ceil(t * 1e6) .. " microseconds"
    elseif t < 1 then
        return ceil(t * 1e3) .. " ms"
    else
        return ("%0.3f s"):format(t)
    end
end

local function printDivider()
    print(string.rep("=", 40))
end

local function sendNotification(title, text, duration)
    local StarterGui = game:GetService("StarterGui")
    StarterGui:SetCore("SendNotification", {
        Title = title,
        Text = text,
        Duration = duration or 5,
    })
end

local function main()
    local executorName = (identifyexecutor and identifyexecutor() or "Unknown Executor")
    log("✅ Detected Executor: " .. executorName)
    log(("Measuring tick() overhead over %d iterations..."):format(config.overheadIterations))
    local tickOverhead = measureTickOverhead(config.overheadIterations)
    log(("✅ Tick() overhead per call: %.9f seconds"):format(tickOverhead))
    log(("Warming up with %d iterations..."):format(config.warmupIterations))
    runWarmup(config.warmupIterations)
    log("Get ready for the performance test!")
    for i = 3, 1, -1 do
        log(tostring(i))
    end
    log("Go!")
    log(("Starting performance test with %d iterations..."):format(config.testIterations))
    local progressInterval = floor(config.testIterations / config.progressIntervalFactor)
    local success, times, totalTestTime = pcall(function()
        return runTest(config.testIterations, tickOverhead, progressInterval)
    end)
    if not success then
        log("❌ Test failed! Reason: " .. times)
        return
    end
    local stats = computeStats(times, config.testIterations)
    printDivider()
    log("✅ RESULTS")
    printDivider()
    log("Average Time:             " .. formatTime(stats.avgTime))
    log("Median Time:              " .. formatTime(stats.medianTime))
    log("Minimum Time:             " .. formatTime(stats.minTime))
    log("Maximum Time:             " .. formatTime(stats.maxTime))
    log("90th Percentile:          " .. formatTime(stats.p90Time))
    log("95th Percentile:          " .. formatTime(stats.p95Time))
    log("99th Percentile:          " .. formatTime(stats.p99Time))
    log("99.9th Percentile:        " .. formatTime(stats.p999Time))
    log("Standard Deviation:       " .. formatTime(stats.stdev))
    log("Mean Absolute Deviation:  " .. formatTime(stats.mad))
    log(("Coefficient of Variation: %.2f%%"):format(stats.coeffVariation))
    log(("Total Test Duration:      %.3f s"):format(totalTestTime))
    log(("Iterations per Second:    %.2f"):format(config.testIterations / totalTestTime))
    printDivider()
    log("✅ Test complete. Enjoy your results!")
    sendNotification("Check console", "Execution test finished", 5)
    log("✅ Test made by notdefinity - Join the Discord: https://discord.gg/qeFQ57eqtj")
end

main()
